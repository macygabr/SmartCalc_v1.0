#test arifmetic1
  char str[255] = "cos(0)";
  double res = calc(str,0);
  double res_orig = 1;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic2
  char str[255] = "(asin(1)-(sin(-1)))";
  float res = calc(str,0);
  float res_orig = 2.41226731;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic3
  char str[255] = "(acos(0)-(sin(1)))";
  float res = calc(str,0);
  float res_orig = 0.72932534;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic4
  char str[255] = "asin(1)-atan(1)+acos(1)";
  float res = calc(str,0);
  float res_orig = 0.78539816;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic5
  char str[255] = "sin(0.5)+16-3^8";
  float res = calc(str,0);
  float res_orig = -6544.52057446;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic6
  char str[255] = "-(-8*9.0)";
  float res = calc(str,0);
  float res_orig = 72;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic7
  char str[255] = "(-2+0.5)*(-2)";
  float res = calc(str,0);
  float res_orig = 3;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic8
  char str[255] = "(2*1)-(sin(1))";
  float res = calc(str,0);
  float res_orig = 1.15852902;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic9
  char str[255] = "sqrt(100)";
  float res = calc(str,0);
  float res_orig = 10;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic10
  char str[255] = "53mod2";
  float res = calc(str,0);
  float res_orig = 1.00000000;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic11
  char str[255] = "cos(0.5)+log(53)";
  double res = calc(str,0);
  double res_orig = 2.60185843;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic12
  char str[255] = "-1.0005";
  double res = calc(str,0);
  double res_orig = -1.0005;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic13
  char str[255] = "(-1.0005))";
  double res = calc(str,0);
  ck_assert_float_nan(res);

#test arifmetic14
  char str[255] = "(-1";
  double res = calc(str,0);
  ck_assert_float_nan(res);

#test arifmetic15
  char str[255] = "5..4";
  double res = calc(str,0);
  ck_assert_float_nan(res);

#test arifmetic16
  char str[255] = "5)(4";
  double res = calc(str,0);
  ck_assert_float_nan(res);

#test arifmetic17
  char str[255] = "1-2-3-4-";
  double res = calc(str,0);
  ck_assert_float_nan(res);

#test arifmetic18
  char str[255] = "1-2-3-4--";
  double res = calc(str,0);
  ck_assert_float_nan(res);

#test arifmetic19
  char str[255] = "mod3";
  double res = calc(str,0);
  ck_assert_float_nan(res);

#test arifmetic20
  char str[255] = "cos(5x)";
  double res = calc(str,0);
  ck_assert_float_nan(res);

#test arifmetic21
  char str[255] = "cos(x5)";
  double res = calc(str,0);
  ck_assert_float_nan(res);

#test arifmetic22
  char str[255] = "5+2^3^2*2";
  float res = calc(str,0);
  float res_orig = 1029;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);

#test arifmetic23
  char str[255] = "((((((5))))))";
  float res = calc(str,0);
  float res_orig = 5;
  ck_assert_double_eq_tol(res_orig, res, 1e-07);